// <auto-generated />
using System;
using BaseCode.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BaseCode.Data.Migrations
{
    [DbContext(typeof(BaseCodeEntities))]
    [Migration("20230508092500_update-applicantModel-skill1")]
    partial class updateapplicantModelskill1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BaseCode.Data.Models.Applicant", b =>
                {
                    b.Property<int>("ApplicantId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barangay")
                        .IsRequired()
                        .HasColumnName("Barangay")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CVFileName")
                        .IsRequired()
                        .HasColumnName("CVFileName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("City")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnName("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnName("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobApplied");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnName("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnName("Phone")
                        .HasColumnType("varchar(11)");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasColumnName("Province")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Remarks");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnName("Status")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnName("Street")
                        .HasColumnType("varchar(300)");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnName("SubmissionDate");

                    b.Property<int>("ZipCode")
                        .HasColumnName("ZipCode");

                    b.HasKey("ApplicantId");

                    b.ToTable("Applicant");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Client", b =>
                {
                    b.Property<string>("ClientID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<string>("AllowedOrigin");

                    b.Property<bool?>("ApplicationType");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<int?>("RefreshTokenLifeTime");

                    b.Property<string>("Secret");

                    b.HasKey("ClientID");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("BaseCode.Data.Models.CollegeEducation", b =>
                {
                    b.Property<int>("CollegeEducId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<int?>("CollegeEducationCollegeEducId");

                    b.Property<string>("CollegeName");

                    b.Property<string>("Degree");

                    b.Property<int>("YearEnded");

                    b.Property<int>("YearStarted");

                    b.HasKey("CollegeEducId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("CollegeEducationCollegeEducId");

                    b.ToTable("College");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Experience", b =>
                {
                    b.Property<int>("ExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<string>("Barangay")
                        .HasColumnName("Barangay")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("City")
                        .HasColumnName("City")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("CompanyName")
                        .HasColumnName("CompanyName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasColumnName("Country")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrentlyWorking")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnName("CurrentlyWorking")
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("ExperienceId1");

                    b.Property<bool>("IsFirstJob")
                        .HasColumnName("IsFirstJob");

                    b.Property<string>("Position")
                        .HasColumnName("Position")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Province")
                        .HasColumnName("Province")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Street")
                        .HasColumnName("Street")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TimeEnded")
                        .HasColumnName("TimeEnded")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TimeStarted")
                        .HasColumnName("TimeStarted")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("ZipCode")
                        .HasColumnName("ZipCode");

                    b.HasKey("ExperienceId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ExperienceId1");

                    b.ToTable("Experience");
                });

            modelBuilder.Entity("BaseCode.Data.Models.HighSchoolEducation", b =>
                {
                    b.Property<int>("HighSchoolEducId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<int?>("HighSchoolEducId1");

                    b.Property<string>("HighSchoolName");

                    b.Property<int>("YearEnded");

                    b.Property<int>("YearStarted");

                    b.HasKey("HighSchoolEducId");

                    b.HasIndex("ApplicantId")
                        .IsUnique();

                    b.HasIndex("HighSchoolEducId1");

                    b.ToTable("HighSchool");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("JobDescription");

                    b.Property<string>("JobName")
                        .HasColumnName("JobName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("JobQualifications");

                    b.Property<string>("JobResponsibilities");

                    b.Property<string>("JobShortDescription");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("JobId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("BaseCode.Data.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpiresUtc");

                    b.Property<DateTime>("IssuedUtc");

                    b.Property<string>("Token")
                        .IsRequired();

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("Token")
                        .HasName("refreshToken_Token");

                    b.HasAlternateKey("Username")
                        .HasName("refreshToken_UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<string>("SkillName");

                    b.HasKey("SkillId");

                    b.HasIndex("ApplicantId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("BaseCode.Data.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("CreatedBy");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserID");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Website", b =>
                {
                    b.Property<int>("WebsiteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicantId");

                    b.Property<int?>("WebsiteId1");

                    b.Property<string>("WebsiteUrl");

                    b.HasKey("WebsiteId");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("WebsiteId1");

                    b.ToTable("Website");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BaseCode.Data.Models.CollegeEducation", b =>
                {
                    b.HasOne("BaseCode.Data.Models.Applicant", "Applicant")
                        .WithMany("College")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BaseCode.Data.Models.CollegeEducation")
                        .WithMany("Colleges")
                        .HasForeignKey("CollegeEducationCollegeEducId");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Experience", b =>
                {
                    b.HasOne("BaseCode.Data.Models.Applicant", "Applicant")
                        .WithMany("WorkExperience")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BaseCode.Data.Models.Experience")
                        .WithMany("WorkExperience")
                        .HasForeignKey("ExperienceId1");
                });

            modelBuilder.Entity("BaseCode.Data.Models.HighSchoolEducation", b =>
                {
                    b.HasOne("BaseCode.Data.Models.Applicant", "Applicant")
                        .WithOne("HighSchool")
                        .HasForeignKey("BaseCode.Data.Models.HighSchoolEducation", "ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BaseCode.Data.Models.HighSchoolEducation", "HighSchool")
                        .WithMany()
                        .HasForeignKey("HighSchoolEducId1");
                });

            modelBuilder.Entity("BaseCode.Data.Models.Skill", b =>
                {
                    b.HasOne("BaseCode.Data.Models.Applicant", "Applicant")
                        .WithMany("Skill")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BaseCode.Data.Models.Website", b =>
                {
                    b.HasOne("BaseCode.Data.Models.Applicant", "Applicant")
                        .WithMany("Website")
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BaseCode.Data.Models.Website")
                        .WithMany("Websites")
                        .HasForeignKey("WebsiteId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
